package com.isoler.studyim.util;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class CodeGenerateTest {

    @Test
    public void generateMysql() {
        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        final GlobalConfig gc = new GlobalConfig();
        gc.setOutputDir("d://generator");
        gc.setAuthor("AutoGenerated");
        gc.setEnableCache(false);
        gc.setBaseResultMap(true);
        gc.setBaseColumnList(true);
        gc.setOpen(false);
        //实体属性 Swagger2 注解
        gc.setSwagger2(true);
        mpg.setGlobalConfig(gc);

        // 数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl("jdbc:mysql://localhost:3306/isoler?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=UTC");
        // dsc.setSchemaName("public");
        dsc.setDriverName("com.mysql.cj.jdbc.Driver");
        dsc.setUsername("root");
        dsc.setPassword("admin");
        mpg.setDataSource(dsc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        pc.setParent("com.isoler.blog.business");
        pc.setModuleName("");
        pc.setEntity("model.bean");
        pc.setMapper("mapper");
        mpg.setPackageInfo(pc);

        // 如果模板引擎是 freemarker
        String templatePath = "/templates/mapper.xml.ftl";
        // 如果模板引擎是 velocity
        // String templatePath = "/templates/mapper.xml.vm";
        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() {
            @Override
            public void initMap() {
                // to do nothing
            }
        };
        List focList = new ArrayList<FileOutConfig>();
        focList.add(new FileOutConfig(templatePath) {
            @Override
            public String outputFile(TableInfo tableInfo) {
                // 自定义输入文件名称
                return gc.getOutputDir() + "/com/isoler/template/business/mapper/"
                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;
            }
        });
        cfg.setFileOutConfigList(focList);
        mpg.setCfg(cfg);
        mpg.setTemplate(new TemplateConfig().setXml(null));

        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        //表名下划线转驼峰命名
        strategy.setNaming(NamingStrategy.underline_to_camel);
        //字段下划线转驼峰命名
        strategy.setColumnNaming(NamingStrategy.underline_to_camel);
        //【实体】是否为lombok模型（默认 false）
        strategy.setEntityLombokModel(true);
        //生成 <code>@RestController</code> 控制器
        strategy.setRestControllerStyle(true);
        // 表名前缀
        strategy.setTablePrefix("t_");
        // 字段前缀
        strategy.setFieldPrefix("c_", "arr_", "n_", "d_", "dt_");
        //驼峰转连字符
        strategy.setControllerMappingHyphenStyle(false);
        //是否生成实体时，生成字段注解
        strategy.setEntityTableFieldAnnotationEnable(true);
        // 生成指定表名的相关文件
        strategy.setInclude("t_data_sync", "t_data_sync_log");
        mpg.setStrategy(strategy);
        mpg.setTemplateEngine(new FreemarkerTemplateEngine());
        mpg.execute();
    }

    @Test
    public void generatePostgres() {
        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        final GlobalConfig gc = new GlobalConfig();
        gc.setOutputDir("d://generator");
        gc.setAuthor("AutoGenerated");
        gc.setEnableCache(false);
        gc.setBaseResultMap(true);
        gc.setBaseColumnList(true);
        gc.setOpen(true);
        //实体属性 Swagger2 注解
        gc.setSwagger2(true);
        //指定生成的主键的ID类型
        gc.setIdType(IdType.UUID);
        mpg.setGlobalConfig(gc);

        // 数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl("jdbc:postgresql://43.138.159.130:5432/isoler");
        dsc.setDriverName("org.postgresql.Driver");
        dsc.setUsername("sa");
        dsc.setPassword("123456");
        dsc.setDbType(DbType.POSTGRE_SQL);
        dsc.setSchemaName("db_chat");
        mpg.setDataSource(dsc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        pc.setParent("com.isoler.studyim.business.userroom");
        pc.setModuleName("");
        pc.setEntity("model.bean");
        pc.setMapper("mapper");
        mpg.setPackageInfo(pc);

        // 如果模板引擎是 freemarker
        String templatePath = "/templates/mapper.xml.ftl";
        // 如果模板引擎是 velocity
        // String templatePath = "/templates/mapper.xml.vm";
        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() {
            @Override
            public void initMap() {
                // to do nothing
            }
        };
        List focList = new ArrayList<FileOutConfig>();
        focList.add(new FileOutConfig(templatePath) {
            @Override
            public String outputFile(TableInfo tableInfo) {
                // 自定义输入文件名称
                return gc.getOutputDir() + "/com/isoler/studyim/business/mapper/"
                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;
            }
        });
        cfg.setFileOutConfigList(focList);
        mpg.setCfg(cfg);
        mpg.setTemplate(new TemplateConfig().setXml(null));

        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        //表名下划线转驼峰命名
        strategy.setNaming(NamingStrategy.underline_to_camel);
        //字段下划线转驼峰命名
        strategy.setColumnNaming(NamingStrategy.underline_to_camel);
        //【实体】是否为lombok模型（默认 false）
        strategy.setEntityLombokModel(true);
        //生成 <code>@RestController</code> 控制器
        strategy.setRestControllerStyle(true);
        // 表名前缀
        strategy.setTablePrefix("t_");
        // 字段前缀
        strategy.setFieldPrefix("c_", "arr_", "n_", "d_", "dt_");
        //驼峰转连字符
        strategy.setControllerMappingHyphenStyle(false);
        //是否生成实体时，生成字段注解
        strategy.setEntityTableFieldAnnotationEnable(true);
        // 生成指定表名的相关文件
//        strategy.setInclude("t_sys_menu", "t_sys_role", "t_sys_role_menu", "t_sys_user", "t_sys_user_role");
        strategy.setInclude("t_user_room");
        mpg.setStrategy(strategy);
        mpg.setTemplateEngine(new FreemarkerTemplateEngine());
        mpg.execute();
    }

    @Test
    public void generateOracle() {
        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        final GlobalConfig gc = new GlobalConfig();
        gc.setOutputDir("d://generator");
        gc.setAuthor("AutoGenerated");
        gc.setEnableCache(false);
        gc.setBaseResultMap(true);
        gc.setBaseColumnList(true);
        gc.setOpen(false);
        //实体属性 Swagger2 注解
        gc.setSwagger2(true);
        //指定生成的主键的ID类型
        gc.setIdType(IdType.UUID);
        mpg.setGlobalConfig(gc);

        // 数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl("jdbc:ArteryBase://127.0.0.1:6543/abase");
        dsc.setDriverName("com.thunisoft.ArteryBase.Driver");
        dsc.setUsername("sa");
        dsc.setPassword("6789@jkl");
        dsc.setDbType(DbType.POSTGRE_SQL);
        dsc.setSchemaName("db_fzfxjg");
        mpg.setDataSource(dsc);
        mpg.setGlobalConfig(gc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        pc.setParent("com.isoler.blog.business");
        pc.setModuleName("");
        pc.setEntity("model.bean");
        pc.setMapper("mapper");
        mpg.setPackageInfo(pc);

        // 如果模板引擎是 freemarker
        String templatePath = "/templates/mapper.xml.ftl";
        // 如果模板引擎是 velocity
        // String templatePath = "/templates/mapper.xml.vm";
        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() {
            @Override
            public void initMap() {
                // to do nothing
            }
        };
        List focList = new ArrayList<FileOutConfig>();
        focList.add(new FileOutConfig(templatePath) {
            @Override
            public String outputFile(TableInfo tableInfo) {
                // 自定义输入文件名称
                return gc.getOutputDir() + "/com/isoler/template/business/mapper/"
                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;
            }
        });
        cfg.setFileOutConfigList(focList);
        mpg.setCfg(cfg);
        mpg.setTemplate(new TemplateConfig().setXml(null));

        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        //表名下划线转驼峰命名
        strategy.setNaming(NamingStrategy.underline_to_camel);
        //字段下划线转驼峰命名
        strategy.setColumnNaming(NamingStrategy.underline_to_camel);
        //【实体】是否为lombok模型（默认 false）
        strategy.setEntityLombokModel(true);
        //生成 <code>@RestController</code> 控制器
        strategy.setRestControllerStyle(true);
        // 表名前缀
        strategy.setTablePrefix("t_");
        // 字段前缀
        strategy.setFieldPrefix("c_", "arr_", "n_", "d_", "dt_");
        //驼峰转连字符
        strategy.setControllerMappingHyphenStyle(false);
        //是否生成实体时，生成字段注解
        strategy.setEntityTableFieldAnnotationEnable(true);
        // 生成指定表名的相关文件
        strategy.setInclude("t_data_sync", "t_data_sync_log");
        mpg.setStrategy(strategy);
        mpg.setTemplateEngine(new FreemarkerTemplateEngine());
        mpg.execute();
    }
}
